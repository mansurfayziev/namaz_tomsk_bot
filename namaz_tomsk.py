import logging
import os
import csv
import pytz
from datetime import datetime, timedelta
from telegram import Update, InputFile, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–º–∞–∑–∞ –∏–∑ CSV

def load_prayer_times(filename="prayer_times.csv"):
    prayer_times = {}
    try:
        with open(filename, mode='r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                prayer_times[row['date']] = {
                    "fajr": row['fajr'],
                    "dhuhr": row['dhuhr'],
                    "asr": row['asr'],
                    "maghrib": row['maghrib'],
                    "isha": row['isha']
                }
    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
    return prayer_times

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞–º–∞–∑–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π

def translate_prayer_name(prayer_name):
    translations = {
        "fajr": "–§–∞–¥–∂—Ä",
        "dhuhr": "–ó—É—Ö—Ä",
        "asr": "–ê—Å—Ä",
        "maghrib": "–ú–∞–≥—Ä–∏–±",
        "isha": "–ò—à–∞"
    }
    return translations.get(prayer_name, prayer_name)  # –ï—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def send_notification(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    user_id = job_data['user_id']
    prayer_name = translate_prayer_name(job_data['prayer_name'])  # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞–º–∞–∑–∞
    prayer_time = job_data['prayer_time']
    await context.bot.send_message(
        chat_id=user_id,
        text=f"–î–æ –Ω–∞–º–∞–∑–∞ <b>{prayer_name}</b> –æ—Å—Ç–∞–ª–æ—Å—å 5 –º–∏–Ω—É—Ç! <i>–í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞:</i> <b>{prayer_time}</b>",
        parse_mode="HTML",
        reply_markup=keyboard  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
    )


# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç "3 –º–∞—Ä—Ç–∞ 2025"
def format_date(date_str):
    date_obj = datetime.strptime(date_str, "%Y-%m-%d")
    months = ["—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è", "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"]
    return f"{date_obj.day} {months[date_obj.month - 1]} {date_obj.year}"

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
keyboard = ReplyKeyboardMarkup(
    [["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"], ["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü"]],
    resize_keyboard=True,
    one_time_keyboard=False  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º False, —á—Ç–æ–±—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –≤–∏–¥–∏–º–æ–π
)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.chat_id
    user_name = update.message.from_user.first_name
    user_username = update.message.from_user.username
    user_data = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (@{user_username}) —Å ID {user_id} –Ω–∞—á–∞–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
    await context.bot.send_message(chat_id=7162436316, text=user_data, parse_mode="HTML")

    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
    welcome_message = (
        "<i>–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</i> &#129302;\n"
        "–í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è <b>–∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –Ω–∞–º–∞–∑–∞</b> –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è üí´\n\n"
        "–¢–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—åüëÅ \n"
        "üìÜ <i>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>—Å–µ–≥–æ–¥–Ω—è</b> - </i>/today \n"
        "üìÜ <i>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ <b>–º–µ—Å—è—Ü</b> - </i>/month \n"
    )
    
    await update.message.reply_text(
        welcome_message,        
        reply_markup=keyboard,  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
        parse_mode="HTML"  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –≤ HTML
    )
    
    context.user_data['user_id'] = user_id
    schedule_notifications(user_id, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /today
async def handle_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.now().strftime("%Y-%m-%d")
    prayer_times = load_prayer_times()
    if today in prayer_times:
        times = prayer_times[today]
        formatted_date = format_date(today)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º HTML
        message = (f"üìÜ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–º–∞–∑–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è</b> ({formatted_date}):\n\n"
                   f"üèô <b>–§–∞–¥–∂—Ä:</b>     {times['fajr']}\n"
                   f"üåÖ <b>–ó—É—Ö—Ä:</b>         {times['dhuhr']}\n"
                   f"üåá <b>–ê—Å—Ä:</b>           {times['asr']}\n"
                   f"üåå <b>–ú–∞–≥—Ä–∏–±:</b>    {times['maghrib']}\n"
                   f"üåÉ <b>–ò—à–∞:</b>          {times['isha']}\n\n"
                   "<i>–°–æ–æ–±—â–∏—Ç–µ, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî @m_fayziev</i>")
        await update.message.reply_text(message, reply_markup=keyboard, parse_mode="HTML")  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∏ HTML
    else:
        # –ï—Å–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        await update.message.reply_text("<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.</b>", reply_markup=keyboard, parse_mode="HTML")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /month
async def handle_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
        current_month_year = datetime.now().strftime("%B %Y")
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        months = {
            "January": "–Ø–Ω–≤–∞—Ä—å", "February": "–§–µ–≤—Ä–∞–ª—å", "March": "–ú–∞—Ä—Ç", "April": "–ê–ø—Ä–µ–ª—å",
            "May": "–ú–∞–π", "June": "–ò—é–Ω—å", "July": "–ò—é–ª—å", "August": "–ê–≤–≥—É—Å—Ç", "September": "–°–µ–Ω—Ç—è–±—Ä—å",
            "October": "–û–∫—Ç—è–±—Ä—å", "November": "–ù–æ—è–±—Ä—å", "December": "–î–µ–∫–∞–±—Ä—å"
        }
        russian_month = months[current_month_year.split()[0]]
        russian_year = current_month_year.split()[1]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
        with open("month.jpg", "rb") as photo:
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
            await update.message.reply_photo(photo=InputFile(photo))

            # –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Å—è—Ü–µ
            message = f"üìÜ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–º–∞–∑–∞ –Ω–∞ {russian_month} {russian_year}\n\n" \
                      "üïå @namaz_tomsk_bot - –í—Ä–µ–º—è –Ω–∞–º–∞–∑–∞ –¢–æ–º—Å–∫\n" \
                      "üè† –ö—Ä–∞—Å–Ω–∞—è —Å–±–æ—Ä–Ω–∞—è –º–µ—á–µ—Ç—å"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.message.reply_text(message, reply_markup=keyboard)

    except FileNotFoundError:
        await update.message.reply_text("–§–∞–π–ª —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ –º–µ—Å—è—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
def schedule_notifications(user_id, context: ContextTypes.DEFAULT_TYPE):
    prayer_times = load_prayer_times()
    today = datetime.now().strftime("%Y-%m-%d")
    tz = pytz.timezone("Asia/Tomsk")
    now = datetime.now(tz)
    
    if today in prayer_times:
        times = prayer_times[today]
        for prayer_name, prayer_time in times.items():
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                prayer_datetime = datetime.strptime(f"{today} {prayer_time}", "%Y-%m-%d %H:%M")
                prayer_datetime = tz.localize(prayer_datetime)
                notification_time = prayer_datetime - timedelta(minutes=5)
                
                # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                logger.info(f"–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {prayer_name}: {notification_time}")
                
                if notification_time > now:
                    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
                    context.job_queue.run_once(
                        send_notification,
                        when=notification_time,
                        data={
                            'user_id': user_id,
                            'prayer_name': prayer_name,
                            'prayer_time': prayer_time
                        }
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {prayer_name} –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞ {notification_time}.")
                else:
                    logger.warning(f"–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {prayer_name} —É–∂–µ –ø—Ä–æ—à–ª–æ.")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è {prayer_name}: {e}")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    token = "7332091058:AAFgNFNHQVr6npjk1i1fMPVGX8cXZ0PfyRY"
    application = Application.builder().token(token).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("today", handle_today))
    application.add_handler(CommandHandler("month", handle_month))
    application.add_handler(MessageHandler(filters.Text(["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"]), handle_today))
    application.add_handler(MessageHandler(filters.Text(["–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü"]), handle_month))
    application.run_polling()

if __name__ == "__main__":
    main()
